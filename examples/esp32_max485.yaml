substitutions:
  devicename: "wemos-d32-nibe"
  friendly_devicename: NibeGW

esphome:
  name: $devicename

# Example is for a LolinD32 Board, use your own from here: https://esphome.io/components/esp32.html
esp32:
  board: lolin_d32
  framework:
    type: arduino

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none
  #fast_connect: true # Use fast_connect if you are using a hidden network

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "ESP D32 Nibe Proxy AP"
    password: !secret ap_password

# If you wan't 
captive_portal:

# Enable logging, uncomment and switch if you want to enable verbose logging
logger:
  level: DEBUG
  #level: VERY_VERBOSE

# No API if you are using MQTT, password is optional
api:
  password: !secret api_password

ota:
  password: !secret ota_password

# Load nibe component
external_components:
  - source: 
      type: git
      url: https://github.com/elupus/esphome-nibe.git
    components: [ nibegw ]

uart:
  id: my_uart
  rx_pin: GPIO16
  tx_pin: GPIO17
  baud_rate: 9600

nibegw:
  dir_pin:
    number: GPIO4
    inverted: false

  # If you have a named uart instance, you can specify this here.
  uart_id: my_uart

  udp:
    # The target address(s) to send data to. May also be multicast addresses.
    target:
      - ip: 192.168.1.7
        port: 9999

    # List of source address to accept read/write from, may be empty for no filter, but
    # this is not recommended.
    source:
      - 192.168.1.7

    # Optional port this device will listen to to receive read requests. Defaults to 9999
    read_port: 9999

    # Optional port this device will listen to to receive write request. Defaults to 10000
    write_port: 10000


  acknowledge:
    - MODBUS40
    # Enable a dummy RMU40 accessory to receive updates
    # to certain registers faster. This should not be
    # enabled if you have an actual RMU40.
    - RMU40_S4

  # Constant replies to certain requests can be made
  constants:
    - address: MODBUS40
      token: ACCESSORY
      data: [
            0x0A, # MODBUS version low
            0x00, # MODBUS version high
            0x02, # MODBUS address?
      ]

    # Accessory version response
    - address: RMU40_S4
      token: ACCESSORY
      data: [
            0xEE, # RMU ?
            0x03, # RMU version low
            0x01, # RMU version high
      ]

    # Unknown response that nibepi uses
    - address: RMU40_S4
      token: RMU_DATA
      command: RMU_WRITE
      data: [
            0x63,
            0x00,
      ]

    # Constant fixed temperature to avoid pump going into alarm.
    - address: RMU40_S4
      token: RMU_WRITE
      data: [
            0x06, # Temperature
            0x14, # degrees low
            0x00, # degrees high
      ]

sensor:
  - platform: wifi_signal
    name: $friendly_devicename wifi strength

# Some helper functions to restart ESPHome from HA
button:
- platform: restart
  name: $friendly_devicename Restart
- platform: safe_mode
  name: $friendly_devicename Safe Mode Boot
